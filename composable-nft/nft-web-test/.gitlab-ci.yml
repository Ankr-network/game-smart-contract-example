variables:
  STACK_NAME: tfb_blockchain_celo-web-test

stages:
  - build
  - deploy


before_script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

.before_script: &before_script
  before_script:
    - which ssh-agent || (apk add openssh) &>/dev/null
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - alias sunucudaYap='ssh -T -p ${SSH_PORT} ${SSH_USER}@${SSH_SERVER}'


.deploy_script:
  script:
    - cat ./docker-compose.yml | sunucudaYap "cat -> /tmp/${CI_PROJECT_NAME}.yml";
    - sunucudaYap '
       for vol in '"$VOLUMES"'; do
         docker volume ls --filter=name='"$STACK_NAME"' --format={{.Name}}
         | grep $vol &>/dev/null || (docker volume create -d local $vol &>/dev/null && echo $vol volume created);
       done;
       docker login -u '"${CI_REGISTRY_USER}"' -p '"${CI_REGISTRY_PASSWORD}"' '"${CI_REGISTRY}"';

       for line in $(docker service ls --filter=name='"$STACK_NAME"' --format="{{.Name}};{{.Image}}"); do
         imageName="$(echo $line | cut -d ";" -f 2)";
         service="$(echo $line | cut -d ";" -f 1)";
         docker pull $imageName;

         docker stack ls --format={{.Name}} | grep '"$STACK_NAME"' &>/dev/null 
         && docker service update --force --with-registry-auth --image=$imageName:'"${CI_COMMIT_REF_SLUG}"' $service; 
       done;

       CI_PROJECT_PATH='"${CI_PROJECT_PATH}"' CI_COMMIT_REF_SLUG='"${CI_COMMIT_REF_SLUG}"'
       docker stack deploy --prune --with-registry-auth --resolve-image=always 
       -c '"/tmp/${CI_PROJECT_NAME}.yml"' 
       '"${STACK_NAME}"';
       rm -rf "/tmp/${CI_PROJECT_NAME}*.yml";
     '

service build:
  stage: build
  image: docker:dind
  only:
    refs:
      - main
      - dev
      - lab
      - master
  tags:
    - docker
    - tfb
  script: >
    docker build --build-arg BACKEND_VERSION="${CI_PIPELINE_IID}" -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} .;
    docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
    docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG};


production deploy:
  stage: deploy
  image: alpine
  except:
    - schedules
  only:
    - lab
    - dev
    - main
    - master
  tags:
    - tfb
  environment:
    name: demo production preview
    url: https:/blockchain-test.truefeedback.io
  <<: *before_script
  extends: .deploy_script
